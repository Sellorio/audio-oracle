@typeparam TEnum

<AoMultiSwitchInput T="TEnum" Options="filteredOptions" SelectedOption="SelectedOption" SelectedOptionChanged="OnSelectedOptionChangedAsync" DisabledFunc="DisabledFunc" Disabled="Disabled" />

@code {
	IList<TEnum> filteredOptions = [];

	[Parameter]
	public Func<TEnum, bool>? DisabledFunc { get; set; }

	[Parameter]
	public IList<TEnum>? Include { get; set; }

	[Parameter]
	public IList<TEnum>? Exclude { get; set; }

	[Parameter]
	public required TEnum? SelectedOption { get; set; }

	[Parameter]
	public EventCallback<TEnum> SelectedOptionChanged { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	public override async Task SetParametersAsync(ParameterView parameters)
	{
		await base.SetParametersAsync(parameters);
		var options = Include ?? typeof(TEnum).GetEnumValues().Cast<TEnum>();

		if (Exclude != null)
		{
			options = options.Except(Exclude);
		}

		filteredOptions = options.ToArray();
	}

	private async Task OnSelectedOptionChangedAsync(TEnum value)
	{
		SelectedOption = value;
		await SelectedOptionChanged.InvokeAsync(value);
	}
}
