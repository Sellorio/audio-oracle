@page "/albums/{Id:int}"
@using Sellorio.AudioOracle.Models.Metadata
@using Sellorio.AudioOracle.ServiceInterfaces.Metadata
@using Sellorio.AudioOracle.Web.Client.Library.Providers.DisableState
@inject NavigationManager NavigationManager
@inject IAlbumService AlbumService
@inject ITrackService TrackService
@inject IResultPopupService ResultPopupService

<PageLoadWrapper Result="albumResult">
	<AoBoxLoader Loading="isLoading">
		<AoColumns>
			<AoColumn Weight="1">
				<AoPanel Title="Details">
					<img class="album-art" alt="Album Art" src="@("/f/" + albumResult!.Value.AlbumArt.UrlId)">

					<AoTextField Label="Title" Value="@albumResult.Value.Title" Disabled />
					<AoTextField Label="Artists" Value="@string.Join("; ", albumResult.Value.Artists.Select(x => x.Name))" Disabled />

					@if (albumResult.Value.ReleaseDate != null)
					{
						<AoTextField Label="Released" Value="@albumResult.Value.ReleaseDate.Value.ToShortDateString()" Disabled />
					}
					else if (albumResult.Value.ReleaseYear != null)
					{
						<AoTextField Label="Released" Value="@albumResult.Value.ReleaseYear.ToString()" Disabled />
					}

					<AoTextField Label="Track Count" Value="@albumResult.Value.TrackCount.ToString()" Disabled />
				</AoPanel>
				<AoPanel Title="Actions">
					<AoResultMessages Result="actionResult" />

					<AoButton Red Label="Delete" OnClick="OpenDeleteDialogAsync" />

					@if (albumResult!.Value.Tracks.Any(x => x.Status is TrackStatus.MetadataRetrievalFailed or TrackStatus.DownloadFailed))
					{
						<AoButton Primary Label="Retry All" OnClick="RetryAllAsync" />
					}
				</AoPanel>
			</AoColumn>
			<AoColumn Weight="1">
				<AoPanel Title="Tracks">
					<AoGridList>
						<thead>
							<tr>
								<th>#</th>
								<th>Title</th>
								<th>Alt. Title</th>
								<th>Duration</th>
								<th>Status</th>
								<th></th>
							</tr>
						</thead>
						<tbody>
							@foreach (var track in albumResult!.Value.Tracks.OrderBy(x => x.TrackNumber))
							{
								<TrackDetailsRow @key="track" Track="track" />
							}
						</tbody>
					</AoGridList>
				</AoPanel>
			</AoColumn>
		</AoColumns>
	</AoBoxLoader>
</PageLoadWrapper>

@code {
	bool isLoading = true;
	ValueResult<Album>? albumResult;
	IResult? actionResult;

	[CascadingParameter]
	public required IDialogProvider DialogProvider { get; set; }

	[Parameter]
	public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		isLoading = true;
		albumResult = await AlbumService.GetAlbumAsync(Id, AlbumFields.Artists | AlbumFields.Tracks);
		isLoading = false;
	}

	private async Task RetryAllAsync()
	{
		actionResult = null;
		isLoading = true;
		actionResult =
			await TrackService.RetryAllTracksAsync(Id)
				.WithSuccessMessage("Successfully started retrying tracks.");
		isLoading = false;
	}

	private async Task OpenDeleteDialogAsync()
	{
		var deleteResult = await DialogProvider.ShowDialogAsync(() => new DeleteAlbumDialog { AlbumId = Id });

		if (deleteResult.WasSuccess)
		{
			NavigationManager.NavigateTo("/albums");
		}
	}
}
