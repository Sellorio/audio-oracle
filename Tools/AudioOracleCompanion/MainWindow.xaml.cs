using System.IO;
using System.Text;
using System.Windows;

namespace AudioOracleCompanion;
/// <summary>
/// Interaction logic for MainWindow.xaml
/// </summary>
public partial class MainWindow
{
    public MainWindow()
    {
        InitializeComponent();
    }

    private async void StartButton_Click(object sender, RoutedEventArgs e)
    {
        StartButton.IsEnabled = false;
        Overlay.Visibility = Visibility.Visible;

        while (true)
        {
            WebView.CoreWebView2.Navigate("https://music.youtube.com/");
            await Task.Delay(4000);
            var cookies = await WebView.CoreWebView2.CookieManager.GetCookiesAsync("https://music.youtube.com");

            var sb = new StringBuilder(2000);

            // Header (most tools expect this)
            sb.AppendLine("# Netscape HTTP Cookie File");
            sb.AppendLine("# This file was generated by AudioOracleCompanion");
            sb.AppendLine($"# Exported: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
            sb.AppendLine();

            foreach (var c in cookies)
            {
                // Domain: use the domain as reported. If HttpOnly, prefix with #HttpOnly_ (convention)
                var domainToken = c.Domain ?? "";
                //if (c.IsHttpOnly)
                //{
                //    domainToken = "#HttpOnly_" + domainToken;
                //}

                // include_subdomains flag: TRUE if domain starts with a dot (cookie is for subdomains),
                // otherwise FALSE. Many cookies use a leading '.' to mean include subdomains.
                var includeSubdomains = (c.Domain != null && c.Domain.StartsWith(".")) ? "TRUE" : "FALSE";

                // Path
                var path = string.IsNullOrEmpty(c.Path) ? "/" : c.Path;

                // Secure flag
                var secure = c.IsSecure ? "TRUE" : "FALSE";

                // Expiration: Netscape uses unix-time (seconds since epoch). Session cookies -> 0
                long expiryEpoch = 0;
                try
                {
                    // CoreWebView2Cookie.Expires is a nullable DateTime (UTC). Use it if present.
                    if (c.Expires != default)
                    {
                        // Ensure the DateTimeOffset is in UTC
                        var dto = DateTime.SpecifyKind(c.Expires, DateTimeKind.Utc);
                        expiryEpoch = new DateTimeOffset(dto).ToUnixTimeSeconds();
                    }
                }
                catch
                {
                    expiryEpoch = 0; // fallback to session
                }

                // Name and Value: sanitize newlines/tabs which would break the file.
                string Sanitize(string s)
                {
                    if (s == null) return "";
                    return s
                        .Replace("\r", "")
                        .Replace("\n", "")
                        .Replace("\t", "");
                }

                var name = Sanitize(c.Name);
                var value = Sanitize(c.Value);

                // Construct line: domain \t include_subdomains \t path \t secure \t expiry \t name \t value
                sb.Append(domainToken);
                sb.Append('\t');
                sb.Append(includeSubdomains);
                sb.Append('\t');
                sb.Append(path);
                sb.Append('\t');
                sb.Append(secure);
                sb.Append('\t');
                sb.Append(expiryEpoch);
                sb.Append('\t');
                sb.Append(name);
                sb.Append('\t');
                sb.Append(value);
                sb.AppendLine();
            }

            // Write file (overwrite)
            await File.WriteAllTextAsync(Path.Combine(Config.DataPath, "cookies-youtube.txt"), sb.ToString().Replace("\r\n", "\n"), Encoding.ASCII);

            await Task.Delay(29 * 60 * 1000); // every 29 minutes

            // Missing: YSC, SIDCC
        }
    }
}